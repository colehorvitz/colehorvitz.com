{"version":3,"sources":["Console.js","ProjectCard.js","projects.js","App.js","serviceWorker.js","index.js"],"names":["Console","showBio","setTimeout","setState","displayBio","state","className","startDelay","cursor","show","onLineTyped","this","style","display","Component","ProjectCard","renderTags","props","project","tags","map","tag","src","img","alt","name","url","href","target","rel","desc","PROJECTS","gradient_start","gradient_end","App","renderProjects","proj","fontWeight","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2c99c729.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Typist from 'react-typist'\n\nclass Console extends Component {\n    constructor() {\n        super();\n        this.state = {\n            displayBio:false,\n        }\n    }\n    \n    render() {\n        return(\n            <div className=\"console\">\n                <div className=\"command-line\">\n                    <span className=\"console-marker\">></span>\n                    <Typist startDelay={500} cursor={{show: false}} onLineTyped={this.showBio}>\n                        whois cole\n                    </Typist>\n                </div>\n                <div style={{display: this.state.displayBio ? 'block' : 'none'}} className=\"bio\">\n                    <p>Name: Cole Horvitz</p>\n                    <p>Education: Brown University</p>\n                    <p>Location: Los Angeles</p>\n                    <p>Skills: web design, full-stack development</p>\n                    <p>Contact: cole_horvitz@brown.edu</p>\n                </div>\n            </div>\n        )\n    }\n\n    showBio = () => {\n        setTimeout( () => {\n            let displayBio = true;\n            this.setState({displayBio});\n        }, 100)\n    }\n}\n\nexport default Console;","import React, { Component } from 'react'\n\nclass ProjectCard extends Component {\n    constructor() {\n        super();\n        this.state={\n\n        }\n    }\n\n    render() {\n        return(\n            <div className=\"project-card\">\n                <div className=\"img-wrap\">\n                    <img src={this.props.project.img}  alt={this.props.project.name} />\n                </div>\n                <div className=\"info\">\n                    {this.props.project.url != null ?\n                    <a href={this.props.project.url} target=\"_blank\" rel=\"noopener noreferrer\"><h3>{this.props.project.name}</h3></a>\n                    : <h3>{this.props.project.name}</h3>}\n                    <p>{this.props.project.desc}</p>\n                    <div className=\"tag-wrap\">\n                        {this.renderTags()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderTags = () => {\n        return this.props.project.tags.map( tag => {\n            return (\n                <div className=\"tag\">\n                    {tag}\n                </div>\n            )    \n        })\n    }\n\n}\n\nexport default ProjectCard","export const PROJECTS = [\n    {\n        name: \"Brown University Bear Dens\",\n        desc: \"A web application that helps Brown students discover on-campus housing.\",\n        tags: [\"react\", \"css\", \"sprql\"],\n        img: \"brown1.png\",\n        gradient_start:\"rgba(255, 18, 18, .4)\",\n        gradient_end:\"rgba(255,199,0,.4)\",\n        url:\"https://www.brownbeardens.com\"\n    },\n\n    {\n        name: \"deepread.app\",\n        desc: \"A reader application that offers a customizable reading environment.\",\n        tags: [\"react\", \"css\", \"django\"],\n        img: \"doc.jpg\",\n        gradient_start:\"rgba(255, 18, 18, .4)\",\n        gradient_end:\"rgba(255,199,0,.4)\",\n        url: \"https://www.deepread.app\",\n    },\n\n    {\n        name: \"California State Assembly Redesign\",\n        desc: \"A theoretical, user-friendly redesign of the California State Assembly website.\",\n        tags: [\"html\", \"css\"],\n        img: \"capitol.png\",\n        gradient_start:\"rgba(255, 18, 18, .4)\",\n        gradient_end:\"rgba(255,199,0,.4)\",\n        url:null,\n    },\n\n    {\n        name: \"Spidr Dev\",\n        desc: \"A web design project that has developed websites for various clients.\",\n        tags: [\"html\", \"css\"],\n        img: \"design1.jpg\",\n        gradient_start:\"rgba(255, 18, 18, .4)\",\n        gradient_end:\"rgba(255,199,0,.4)\",\n        url:\"https://spidr.dev\",\n    },\n]","import React, { Component } from 'react';\nimport './App.css';\nimport Console from './Console'\nimport ProjectCard from './ProjectCard'\nimport { PROJECTS } from './projects'\nimport { AiFillLinkedin, AiFillGithub } from 'react-icons/ai'\n\nclass App extends Component { \n  render() {\n    return (\n      <div>\n        <div className=\"main-wrap\">\n          <div className=\"intro-wrap\">\n            <div className=\"intro-header\">\n              <h1 style={{fontWeight:400}}>cole horvitz</h1>\n              <div className=\"nav\">\n                <a href=\"https://www.linkedin.com/in/cole-horvitz-37a58a19a\" target=\"_blank\" rel=\"noopener noreferrer\"><AiFillGithub className=\"icon\"/></a>\n                <a href=\"https://github.com/colehorvitz\" target=\"_blank\" rel=\"noopener noreferrer\"><AiFillLinkedin className=\"icon\" /></a>\n              </div>\n            </div>\n            <Console />\n          </div>\n        </div>\n        <div className=\"projects-wrap\" id=\"projects\">\n        <h2>projects</h2>\n          <div className=\"projects-grid\">\n            {this.renderProjects()}\n          </div>\n        </div>\n        <div className=\"footer\">\n          <h4>Cole Horvitz</h4>\n          <p>cole_horvitz@brown.edu</p>\n          <div className=\"icons\">\n            <a href=\"https://www.linkedin.com/in/cole-horvitz-37a58a19a\" target=\"_blank\" rel=\"noopener noreferrer\"><AiFillLinkedin className=\"icon\" /></a>\n            <a href=\"https://github.com/colehorvitz\" target=\"_blank\" rel=\"noopener noreferrer\"><AiFillGithub className=\"icon\"/></a>\n          </div>\n        </div>\n      </div>\n  );\n  }\n\n  renderProjects = () => {\n    return PROJECTS.map( proj => {\n      return <ProjectCard project={proj}/>\n    });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}